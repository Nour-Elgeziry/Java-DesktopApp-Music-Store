/*
 *Written by Nourelrahman Elgeziry  SID: 7593776
 * .
 */
package Client;

import java.awt.print.PrinterException;
import sqlitechinookcw.Track;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sqlitechinookcw.Genre;
import sqlitechinookcw.Parcel;
import java.util.Random;

/**
 * This class is responsible for representing the user interface and event
 * listeners handled when the user interacts with application. Each function is
 * responsible to handle a separate event and sends objects to the server.
 *
 * @author nour
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JButton connectToServerButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        viewTracksButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTextArea = new javax.swing.JTextArea();
        viewGenreButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        addTrackButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        trackIDField = new javax.swing.JTextField();
        trackNameField = new javax.swing.JTextField();
        albumIDField = new javax.swing.JTextField();
        mediaTypeIDField = new javax.swing.JTextField();
        genreIDField = new javax.swing.JTextField();
        composerField = new javax.swing.JTextField();
        millisecondsField = new javax.swing.JTextField();
        bytesField = new javax.swing.JTextField();
        unitPriceField = new javax.swing.JTextField();
        deleteTrackButton = new javax.swing.JButton();
        addTrackButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        deleteTrackNameField = new javax.swing.JTextField();
        deleteTrackIDField = new javax.swing.JTextField();
        editUnitPriceField = new javax.swing.JTextField();
        editTrackNameField = new javax.swing.JTextField();
        editAlbumIDField = new javax.swing.JTextField();
        editMediaTypeIDField = new javax.swing.JTextField();
        editGenreIDField = new javax.swing.JTextField();
        editComposerField = new javax.swing.JTextField();
        editMillisecondsField = new javax.swing.JTextField();
        editBytesField = new javax.swing.JTextField();
        editTrackIDField = new javax.swing.JTextField();
        addGenreButton = new javax.swing.JButton();
        editGenreButton = new javax.swing.JButton();
        deleteGenreButton = new javax.swing.JButton();
        genreTextField = new javax.swing.JTextField();
        genreIdField = new javax.swing.JTextField();
        editGenreIdField = new javax.swing.JTextField();
        editGenreNameField = new javax.swing.JTextField();
        deleteGenreNameField = new javax.swing.JTextField();
        deleteGenreIdField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        searchTrackByGenreField = new javax.swing.JTextField();
        searchTrackByGenreButton = new javax.swing.JButton();
        trackByGenreTextArea = new javax.swing.JScrollPane();
        searchTrackByGenreTextArea = new javax.swing.JTextArea();
        getRandomTrackButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        randomTrackField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectToServerButton.setText("Connect To Server");
        connectToServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectToServerButtonActionPerformed(evt);
            }
        });

        statusLabel.setText("Status");

        viewTracksButton.setText("View Tracks");
        viewTracksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTracksButtonActionPerformed(evt);
            }
        });

        dataTextArea.setColumns(20);
        dataTextArea.setRows(5);
        jScrollPane1.setViewportView(dataTextArea);

        viewGenreButton.setText("View Genre ");
        viewGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGenreButtonActionPerformed(evt);
            }
        });

        printButton.setText("Print Data");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        addTrackButton.setText("Add Track");
        addTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrackButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Manipulating Tracks");
        jLabel1.setAlignmentX(0.5F);

        deleteTrackButton.setText("Delete Track");
        deleteTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTrackButtonActionPerformed(evt);
            }
        });

        addTrackButton2.setText("Edit Track");
        addTrackButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrackButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Using Track Name");

        jLabel3.setText("Using Track ID");

        addGenreButton.setText("Add Genre");
        addGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGenreButtonActionPerformed(evt);
            }
        });

        editGenreButton.setText("Edit Genre");
        editGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGenreButtonActionPerformed(evt);
            }
        });

        deleteGenreButton.setText("Delete Genre");
        deleteGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGenreButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Using Genre Name");

        jLabel5.setText("Using Genre ID");

        jLabel6.setText("Track ID");

        jLabel7.setText("Track Name");

        jLabel8.setText("Album ID");

        jLabel9.setText("Media Type ID");

        jLabel10.setText("Genre ID");

        jLabel11.setText("Composer");

        jLabel12.setText("Milliseconds");

        jLabel13.setText("Bytes");

        jLabel14.setText("Unit Price");

        jLabel15.setText("Track ID");

        jLabel16.setText("Track Name");

        jLabel17.setText("Album ID");

        jLabel18.setText("Media Type ID");

        jLabel19.setText("Genre ID");

        jLabel20.setText("Composer");

        jLabel21.setText("Milliseconds");

        jLabel22.setText("Bytes");

        jLabel23.setText("Unit Price");

        jLabel24.setText("Genre ID");

        jLabel25.setText("Genre Name");

        jLabel26.setText("Genre ID");

        jLabel27.setText("Genre Name");

        searchTrackByGenreButton.setText("Search Track by Genre");
        searchTrackByGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTrackByGenreButtonActionPerformed(evt);
            }
        });

        searchTrackByGenreTextArea.setColumns(20);
        searchTrackByGenreTextArea.setRows(5);
        trackByGenreTextArea.setViewportView(searchTrackByGenreTextArea);

        getRandomTrackButton.setText("Get Random Track");
        getRandomTrackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getRandomTrackButtonActionPerformed(evt);
            }
        });

        randomTrackField.setColumns(20);
        randomTrackField.setRows(5);
        jScrollPane2.setViewportView(randomTrackField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel27))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(genreIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(genreTextField)))
                            .addComponent(addGenreButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(editGenreButton)
                                .addGap(182, 182, 182))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editGenreNameField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel24)
                                        .addGap(28, 28, 28)
                                        .addComponent(editGenreIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(134, 134, 134))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(addTrackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addTrackButton2)
                        .addGap(124, 124, 124))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 3, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(466, 466, 466)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel6))
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(editBytesField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                    .addComponent(editMillisecondsField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editComposerField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editGenreIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editMediaTypeIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editAlbumIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editTrackNameField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editTrackIDField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editUnitPriceField)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(trackByGenreTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteTrackIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(deleteTrackNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deleteTrackButton))
                        .addGap(171, 171, 171))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(134, 134, 134))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(deleteGenreButton)
                        .addGap(143, 143, 143))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(deleteGenreIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(deleteGenreNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(102, 102, 102))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(printButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(statusLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(connectToServerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel17)
                                .addComponent(jLabel16)
                                .addComponent(jLabel15))
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(composerField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(genreIDField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(millisecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(bytesField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(mediaTypeIDField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(albumIDField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(trackNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(trackIDField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewTracksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewGenreButton)
                        .addGap(140, 140, 140)
                        .addComponent(searchTrackByGenreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchTrackByGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(getRandomTrackButton)))))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectToServerButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewTracksButton)
                    .addComponent(viewGenreButton)
                    .addComponent(searchTrackByGenreButton)
                    .addComponent(searchTrackByGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getRandomTrackButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trackByGenreTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printButton)
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTrackButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteTrackButton)
                        .addComponent(addTrackButton)))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editTrackIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editTrackNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editAlbumIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editMediaTypeIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editGenreIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editComposerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editMillisecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editBytesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(editUnitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(deleteTrackIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteTrackNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addGenreButton)
                                    .addComponent(editGenreButton)
                                    .addComponent(deleteGenreButton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(genreIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel26)
                                        .addComponent(jLabel24)
                                        .addComponent(editGenreIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(trackIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(trackNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(albumIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(mediaTypeIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel18))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(genreIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(composerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(millisecondsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bytesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(unitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23))
                                .addGap(191, 191, 191)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(deleteGenreNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteGenreIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(editGenreNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel27))
                            .addComponent(genreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(97, 97, 97)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectToServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectToServerButtonActionPerformed
        reconnectToServer();
    }//GEN-LAST:event_connectToServerButtonActionPerformed

    private void viewTracksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTracksButtonActionPerformed
        viewTracks();
    }//GEN-LAST:event_viewTracksButtonActionPerformed

    private void viewGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGenreButtonActionPerformed
        viewGenre();
    }//GEN-LAST:event_viewGenreButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        /*
         this function is called when user presses the print button
         It checks if the textArea to print is empty first, if not, the text is prited by sending the data to a virtual printer.
         After the process , it displays  a message to the user to state if the process has completed succesfuuly or not.
         */

        if (dataTextArea.getText().isEmpty()) {
            System.out.println("Text Area is Empty");
            JOptionPane.showMessageDialog(null, "No text to print , Please view Tracks or Genres to print", "Warning", JOptionPane.ERROR_MESSAGE);

        } else {

            try {
                boolean complete = dataTextArea.print();
                if (complete) {
                    JOptionPane.showMessageDialog(null, "Data Sent to printer", "Information", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Printinig Cancelled", "Printer", JOptionPane.ERROR_MESSAGE);
                }

            } catch (PrinterException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void addTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrackButtonActionPerformed
        addTrack();
    }//GEN-LAST:event_addTrackButtonActionPerformed

    private void deleteTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTrackButtonActionPerformed
        deleteTrack();
    }//GEN-LAST:event_deleteTrackButtonActionPerformed

    private void addTrackButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrackButton2ActionPerformed
        editTrack();
    }//GEN-LAST:event_addTrackButton2ActionPerformed

    private void addGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGenreButtonActionPerformed
        addGenre();
    }//GEN-LAST:event_addGenreButtonActionPerformed

    private void editGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGenreButtonActionPerformed
        editGenre();
    }//GEN-LAST:event_editGenreButtonActionPerformed

    private void deleteGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGenreButtonActionPerformed
        deleteGenre();
    }//GEN-LAST:event_deleteGenreButtonActionPerformed

    private void searchTrackByGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTrackByGenreButtonActionPerformed

        searchTrackByGenre();
    }//GEN-LAST:event_searchTrackByGenreButtonActionPerformed

    private void getRandomTrackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getRandomTrackButtonActionPerformed
        getRandomTrack();
    }//GEN-LAST:event_getRandomTrackButtonActionPerformed
    /*
     isNumber function was programed in order to detect if numbers are wriiten in textfields where integers are expected.This happens by passing the values to the Integer.parseInt function.
     If no errors are caught it returns true, else false is returned
     */

    boolean isNumber(String input) {
        try {
            Integer.parseInt(input);
        } catch (NumberFormatException ex) {
            return false;
        }
        return true;
    }

    /*
     setUpperBound function is called when the getRandomTrack function is trigered. It is used to detect the highest number the random number generator can produce.
     The return value of this function willbe themhighes number to be produced and theen can be used by the other functions to get random number. 
     @return this upperBound value
     */
    int setUpperBound() {

        if ((objectOutputStream != null && objectInputStream != null)) {    // checks if output and input stream objects are not null

            try {
                Track track = new Track(0, true);       // Setting a track object with the appropriate values, then sending a parcel object containnig the track object through composition. 
                objectOutputStream.writeObject(new Parcel(track, null, true));
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            }

            //3. get reply from server                          getting the reply from the server that holds the upperBound value.
            System.out.println("in client getting reply");
            Track reply = null;
            statusLabel.setText(" waiting for reply from server");
            try {
                reply = (Track) objectInputStream.readObject();    // recieving the reply as a track object.
                statusLabel.setText("recieved reply from server");
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            } catch (ClassNotFoundException ex) {
                statusLabel.setText("ClassNotFoundException " + ex);
            }

            //4. assign reply to upperBound
            if (reply != null) {
                if (reply.getIsSetUpperBound() == true) {
                    upperBound = reply.getUpperBound();
                    System.out.println("Upper bound is" + upperBound);
                }

            }

        } else {
            statusLabel.setText("You must connect to the server first!!");
        }
        return upperBound;  // returning the upper bound

    }
    /*
     addTrack function is used to add track to the tracks table in the data base. First various checks are held to make sure that all fields are filled, 
     no integers in text fields and vice-versa.Then an object is sent to the server, 
    
     */

    private void addTrack() {

        if (trackIDField.getText().isEmpty() | trackNameField.getText().isEmpty() | albumIDField.getText().isEmpty() | mediaTypeIDField.getText().isEmpty() | genreIDField.getText().isEmpty() | composerField.getText().isEmpty() | millisecondsField.getText().isEmpty() | bytesField.getText().isEmpty() | unitPriceField.getText().isEmpty()) {
            System.out.println("Empty fields detected");
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Detected Empty fields", JOptionPane.ERROR_MESSAGE);

        } else if (!isNumber(trackIDField.getText()) | !isNumber(albumIDField.getText()) | !isNumber(mediaTypeIDField.getText()) | !isNumber(genreIDField.getText()) | !isNumber(millisecondsField.getText()) | !isNumber(bytesField.getText()) | !isNumber(unitPriceField.getText())) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Numbers in Appropriate fields (HINT : All Fields Execpt Name and  Composer :))", "Detected Integre fields contain strings", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(trackNameField.getText()) | isNumber(composerField.getText())) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Text in Name and Composer Fields", "Detected String fields contain Integers", JOptionPane.ERROR_MESSAGE);
        } else {
            // check if any field is empty
            if ((objectOutputStream != null && objectInputStream != null)) {

                //1. Send user inputed values through track object
                int trackID = Integer.parseInt(trackIDField.getText());         // parsing the text to integers in the appropriate fields
                String trackName = trackNameField.getText();
                int albumID = Integer.parseInt(albumIDField.getText());
                int mediaTypeID = Integer.parseInt(mediaTypeIDField.getText());
                int genreID = Integer.parseInt(genreIDField.getText());
                String composer = composerField.getText();
                int milliseconds = Integer.parseInt(millisecondsField.getText());
                int bytes = Integer.parseInt(bytesField.getText());
                double unitPrice = Integer.parseInt(unitPriceField.getText());

                //Make sure all fields are inserted to avoid programe breaking
                //2. send data to server
                try {
                    Track track = new Track(trackID, trackName, albumID, mediaTypeID, genreID, composer, milliseconds, bytes, unitPrice); // setting the track object to send 
                    objectOutputStream.writeObject(new Parcel(track, null, true));  // sending a parcel object wiith track object.
                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                }

            } else {
                statusLabel.setText("You must connect to the server first!!"); // if the input and output streams are not empty, display following message
            }
        }
    }

    private void deleteTrack() {

        /*
         Delete track is used to delete a track either by track id or track name from the tracks table. 
         Checks include both fields are not empty, both fields are not filled and only one field is fiiled in naddition to text fields hace numbers and vice versa.
         If the track id field is not empty, then the track objects uses he appropriate constructor to send the id number to the user.Else if track name is not empty, the
         track name is send to the server
        
         */
        // check if both fields are empty
        if (deleteTrackIDField.getText().isEmpty() && deleteTrackNameField.getText().isEmpty()) {

            System.out.println("Both fields are empty");
            JOptionPane.showMessageDialog(null, "Please fill one field", "Both Fields are  Empty ", JOptionPane.ERROR_MESSAGE);
        } else if (!deleteTrackIDField.getText().isEmpty() && !deleteTrackNameField.getText().isEmpty()) {

            System.out.println("Both fields are Filled");
            JOptionPane.showMessageDialog(null, "Please fill one field only ", "Both Fields are  Filled ", JOptionPane.ERROR_MESSAGE);
        } else if (!isNumber(deleteTrackIDField.getText()) && !deleteTrackIDField.getText().isEmpty()) {
            System.out.println("ID Field contains String");
            JOptionPane.showMessageDialog(null, "Please Enter a Number in ID field ", "ID Field contains String ", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(deleteTrackNameField.getText()) && !deleteTrackNameField.getText().isEmpty()) {
            System.out.println("Name Field contains Integer");
            JOptionPane.showMessageDialog(null, "Please Enter a Name in Name field ", "Name Field contains Integer ", JOptionPane.ERROR_MESSAGE);
        } else {

            if ((objectOutputStream != null && objectInputStream != null)) {

                //1. send either track Name or ID
                if (!deleteTrackIDField.getText().isEmpty()) {  // checking if track id is not empty
                    int trackID = Integer.parseInt(deleteTrackIDField.getText());
                    //2. send data to server
                    try {
                        Track track = new Track(true, trackID, false);
                        objectOutputStream.writeObject(new Parcel(track, null, true)); // sending a parcel object whith track object contaniig track id
                    } catch (IOException ex) {
                        statusLabel.setText("IOException " + ex);
                    }

                } else if (!deleteTrackNameField.getText().isEmpty()) { // checking if track name is not empty

                    String trackName = deleteTrackNameField.getText();

                    try {
                        Track track = new Track(true, trackName, true);
                        objectOutputStream.writeObject(new Parcel(track, null, true)); // sending a parcel object whith track object contaniig track name
                    } catch (IOException ex) {
                        statusLabel.setText("IOException " + ex);
                    }

                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }
        }
    }
    /*
     editTrack function is used to edit tracks from the tracks table. All values must be filled first with corrct information. Then integer values are parsed. 
     An instance of the track object is sent through the parcel object to the server.
     */

    private void editTrack() {

        if (editTrackIDField.getText().isEmpty() | editTrackNameField.getText().isEmpty() | editAlbumIDField.getText().isEmpty() | editMediaTypeIDField.getText().isEmpty() | editGenreIDField.getText().isEmpty() | editComposerField.getText().isEmpty() | editMillisecondsField.getText().isEmpty() | editBytesField.getText().isEmpty() | editUnitPriceField.getText().isEmpty()) {
            System.out.println("Empty fields detected");
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Detected Empty fields", JOptionPane.ERROR_MESSAGE);

        } else if (!isNumber(editTrackIDField.getText()) | !isNumber(editAlbumIDField.getText()) | !isNumber(editMediaTypeIDField.getText()) | !isNumber(editGenreIDField.getText()) | !isNumber(editMillisecondsField.getText()) | !isNumber(editBytesField.getText()) | !isNumber(editUnitPriceField.getText())) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Numbers in Appropriate fields (HINT : All Fields Execpt Name and  Composer :))", "Detected Integre fields contain strings", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(editTrackNameField.getText()) | isNumber(editComposerField.getText())) {
            System.out.println("Name Field contains Integer");
            JOptionPane.showMessageDialog(null, "Please Enter a Text in Name and Composer fields ", "Name or Composer Fields contains Integers ", JOptionPane.ERROR_MESSAGE);
        } else {

            if (objectOutputStream != null && objectInputStream != null) {

                int trackID = Integer.parseInt(editTrackIDField.getText());
                String trackName = editTrackNameField.getText();
                int albumID = Integer.parseInt(editAlbumIDField.getText());
                int mediaTypeID = Integer.parseInt(editMediaTypeIDField.getText());
                int genreID = Integer.parseInt(editGenreIDField.getText());
                String composer = editComposerField.getText();
                int milliseconds = Integer.parseInt(editMillisecondsField.getText());
                int bytes = Integer.parseInt(editBytesField.getText());
                double unitPrice = Integer.parseInt(editUnitPriceField.getText());

                //2. send data to server
                try {

                    Track track = new Track(trackID, trackName, albumID, mediaTypeID, genreID, composer, milliseconds, bytes, unitPrice, true);
                    Parcel parcel = new Parcel(track, null, true);
                    parcel.getTrack().setisDelete(false);       // setting is delete to false to make sure the server picks this finctionality and not delete track.
                    objectOutputStream.writeObject(new Parcel(track, null, true));
                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }
        }
    }
    /*
    
     the function sends a track object to the server which requests all information inside the tracks table.
     When getting back the object, its is shown on the textArea to the user.
    
     */

    private void viewTracks() {
        if (objectOutputStream != null && objectInputStream != null) {

            //1. set isViewTracks to true 
            Track track = new Track(true);  // calling track using the view constructor

            ///2. send data to server
            try {
                objectOutputStream.writeObject(new Parcel(track, null, true));
                objectOutputStream.reset();
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            }

            //3. get reply from server
            System.out.println("in client getting reply");
            Object reply = null;
            statusLabel.setText(" waiting for reply from server");
            try {
                reply = objectInputStream.readObject();
                statusLabel.setText("recieved reply from server");
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            } catch (ClassNotFoundException ex) {
                statusLabel.setText("ClassNotFoundException " + ex);
            }

            //4. display message to user
            if (reply != null) {
                System.out.println(" i am herer in client");

                dataTextArea.setText(reply.toString());     // displaying the reply object to the user in the dataTextArea
            }
            try {
                objectInputStream.reset(); // resetting the stream to make sure no refrences are cached
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            statusLabel.setText("You must connect to the server first!!");

        }
    }
    /*
    
    
     the function sends a genre object to the server which requests all information inside the genres table.
     When getting back the object, its is shown on the textArea to the user.
    
    
    
     */

    private void viewGenre() {

        if (objectOutputStream != null && objectInputStream != null) {

            ///2. send data to server
            try {
                Genre genre = new Genre(true);
                objectOutputStream.writeObject(new Parcel(null, genre, false));
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            }

            //3. get reply from server
            System.out.println("in client getting reply");
            Object reply = null;
            statusLabel.setText(" waiting for reply from server");
            try {
                reply = objectInputStream.readObject();
                statusLabel.setText("recieved reply from server");
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            } catch (ClassNotFoundException ex) {
                statusLabel.setText("ClassNotFoundException " + ex);
            }

            //4. display message to user
            if (reply != null) {
                System.out.println(" i am herer in client");
                dataTextArea.setText(reply.toString());
            }
            try {
                objectInputStream.reset();
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            statusLabel.setText("You must connect to the server first!!");
        }

    }
    /*Add genre function is used to add a genre to the genes table
     Checks if input fields are empty and if text field contain integers and vice versa.
     A genre object is sent to the server containing the requoired information
     */

    private void addGenre() {

        if (genreIdField.getText().isEmpty() | genreTextField.getText().isEmpty()) {
            System.out.println("Empty fields detected");
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Detected Empty fields", JOptionPane.ERROR_MESSAGE);
        } else if (!isNumber(genreIdField.getText())) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Numbers in Genre ID Field", "Detected Integre fields contain strings", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(genreTextField.getText())) {
            System.out.println("String fields contain Integers");
            JOptionPane.showMessageDialog(null, "Please fill using Text in Genre Name Field", "Detected String fields contain siNTEGERS", JOptionPane.ERROR_MESSAGE);
        } else {

            if ((objectOutputStream != null && objectInputStream != null)) {

                //1. Send user inputed values through track object
                int genreID = Integer.parseInt(genreIdField.getText());
                String genreName = genreTextField.getText();

                //2. send data to server
                try {
                    Genre genre = new Genre(genreID, genreName);
                    objectOutputStream.writeObject(new Parcel(null, genre, false));
                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }

        }
    }
    /*editGenre function is used to edit genres in the genres table.
     After checks are performed, object is sent to the server where further operations are performed.*/

    private void editGenre() {

        if (editGenreIdField.getText().isEmpty() | editGenreNameField.getText().isEmpty()) {
            System.out.println("Empty fields detected");
            JOptionPane.showMessageDialog(null, "Please fill all fields", "Detected Empty fields", JOptionPane.ERROR_MESSAGE);
        } else if (!isNumber(editGenreIdField.getText())) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Numbers in Genre ID Field", "Detected Integre fields contain strings", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(editGenreNameField.getText())) {
            System.out.println("String fields contain Integers");
            JOptionPane.showMessageDialog(null, "Please fill using Text in Genre Name Field", "Detected String fields contain siNTEGERS", JOptionPane.ERROR_MESSAGE);
        } else {

            if ((objectOutputStream != null && objectInputStream != null)) {

                //1. Send user inputed values through track object
                int genreID = Integer.parseInt(editGenreIdField.getText());
                String genreName = editGenreNameField.getText();

                //2. send data to server
                try {
                    Genre genre = new Genre(genreID, genreName, true);
                    objectOutputStream.writeObject(new Parcel(null, genre, false));
                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }

        }
    }
    /*
     Delete genre is used to delete a genre either by genre id or genre name from the genres table. 
     Checks include both fields are not empty, both fields are not filled and only one field is fiiled in naddition to text fields hace numbers and vice versa.
     If the genre id field is not empty, then the genre objects uses he appropriate constructor to send the id number to the user.Else if genre name is not empty, the
     genre name is send to the server
        
     */

    private void deleteGenre() {

        // check if both fields are empty
        if (deleteGenreIdField.getText().isEmpty() && deleteGenreNameField.getText().isEmpty()) {

            System.out.println("Both fields are empty");
            JOptionPane.showMessageDialog(null, "Please fill one field", "Both Fields are  Empty ", JOptionPane.ERROR_MESSAGE);
        } else if (!deleteGenreIdField.getText().isEmpty() && !deleteGenreNameField.getText().isEmpty()) {

            System.out.println("Both fields are Filled");
            JOptionPane.showMessageDialog(null, "Please fill one field only ", "Both Fields are  Filled ", JOptionPane.ERROR_MESSAGE);
        } else if (!isNumber(deleteGenreIdField.getText()) && !deleteGenreIdField.getText().isEmpty()) {
            System.out.println("Integre fields contain strings");
            JOptionPane.showMessageDialog(null, "Please fill using Numbers in Genre ID Field", "Detected Integre fields contain strings", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(deleteGenreNameField.getText()) && !deleteGenreNameField.getText().isEmpty()) {
            System.out.println("Name Field contains Integer");
            JOptionPane.showMessageDialog(null, "Please Enter a Name in Name field ", "Name Field contains Integer ", JOptionPane.ERROR_MESSAGE);
        } else {

            if ((objectOutputStream != null && objectInputStream != null)) {

                //1. send either track Name or ID
                if (!deleteGenreIdField.getText().isEmpty()) {
                    int genreId = Integer.parseInt(deleteGenreIdField.getText());
                    //2. send data to server
                    try {
                        Genre genre = new Genre(true, genreId, false);
                        objectOutputStream.writeObject(new Parcel(null, genre, false));
                    } catch (IOException ex) {
                        statusLabel.setText("IOException " + ex);
                    }

                } else if (!deleteGenreNameField.getText().isEmpty()) {

                    String genreName = deleteGenreNameField.getText();

                    try {
                        Genre genre = new Genre(true, genreName, true);
                        objectOutputStream.writeObject(new Parcel(null, genre, false));
                    } catch (IOException ex) {
                        statusLabel.setText("IOException " + ex);
                    }

                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }
        }
    }
    /*searchTrackByGenre is used to allow user to get track by genre of chouce, in this function , checks first that the input field is not empty.
     Then the iser input is captured and the first letter is converted to upper camel case letter to be able to match the database syntax.
     After, that, track object is sent to the server where further operations are held. The reply object containng the tracks is then displayed for the user in the text area.*/

    private void searchTrackByGenre() {

        if (searchTrackByGenreField.getText().isEmpty()) {
            System.out.println("Empty Filed");
            JOptionPane.showMessageDialog(null, "Please Fill The Search Field", "Field is Empty ", JOptionPane.ERROR_MESSAGE);
        } else if (isNumber(searchTrackByGenreField.getText())) {
            System.out.println(" Filed is a number");
            JOptionPane.showMessageDialog(null, "Please Fill The Search Field with text ", "Field is Number ", JOptionPane.ERROR_MESSAGE);
        } else {
            // process data

            if ((objectOutputStream != null && objectInputStream != null)) {

                String trackName = searchTrackByGenreField.getText().substring(0, 1).toUpperCase() + searchTrackByGenreField.getText().substring(1); //upper camel case conversion

                try {
                    Track track = new Track(trackName, true);
                    objectOutputStream.writeObject(new Parcel(track, null, true));
                    objectOutputStream.reset(); // resetting output stream tprevent caching refrences.

                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                }

                //3. get reply from server
                System.out.println("in client getting reply");

                statusLabel.setText(" waiting for reply from server");
                try {
                    reply = objectInputStream.readObject();
                    statusLabel.setText("recieved reply from server");
                } catch (IOException ex) {
                    statusLabel.setText("IOException " + ex);
                } catch (ClassNotFoundException ex) {
                    statusLabel.setText("ClassNotFoundException " + ex);
                }

                //4. display message to user
                if (reply != null) {
                    System.out.println(" i am herer in client");
                    System.out.println("the reply object" + reply);
                    searchTrackByGenreTextArea.setText(reply.toString());
                }
                try {
                    objectInputStream.reset();
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                statusLabel.setText("You must connect to the server first!!");
            }

        }
    }
    /*
     get RandomTrack is used to display a random track to the user.
     It makes use of the setupperBound functio where the return value is used in the random number genrator function as the upperBound input.
     after getting the number, a track object is sent to the server.
     Whne getting a reply, it is displayed for the user in the text area.
     */

    private void getRandomTrack() {
        int setUpperBound = setUpperBound();
        Random rand = new Random(); //instance of random class
        System.out.println("uperbound value = :" + setUpperBound);
        int int_random = rand.nextInt(setUpperBound);
        System.out.println("random number = " + int_random);
        if ((objectOutputStream != null && objectInputStream != null)) {
            try {
                Track track = new Track(true, int_random);
                objectOutputStream.writeObject(new Parcel(track, null, true));
                objectOutputStream.reset();

            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            }

            //3. get reply from server
            System.out.println("in client getting reply");

            statusLabel.setText(" waiting for reply from server");
            try {
                reply = objectInputStream.readObject();
                statusLabel.setText("recieved reply from server");
            } catch (IOException ex) {
                statusLabel.setText("IOException " + ex);
            } catch (ClassNotFoundException ex) {
                statusLabel.setText("ClassNotFoundException " + ex);
            }

            //4. display message to user
            if (reply != null) {
                System.out.println(" i am herer in client");
                System.out.println("the reply object" + reply);
                randomTrackField.setText(reply.toString());
            }

        } else {
            statusLabel.setText("You must connect to the server first!!");
        }

    }
    /*this function is used to connect to the server through the appropriate ip address and port number.
     */

    private void reconnectToServer() {
        closeConnection(); // makes sure socket is clear
        statusLabel.setText("Status: Attempting connection to server");
        try {
            socket = new Socket("127.0.0.1", 2000);

            objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
            objectInputStream = new ObjectInputStream(socket.getInputStream());
            statusLabel.setText("Status: Connected to server");
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            statusLabel.setText(ex.toString()); // connection failed
        }
    }
    /* makes sure socket is clear before establishing connection*/

    private void closeConnection() {
        if (socket != null) {
            statusLabel.setText("Status: closing connection");
            try {
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                socket = null;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    private Socket socket;
    int upperBound;
    private ObjectOutputStream objectOutputStream;
    private ObjectInputStream objectInputStream;
    Object reply;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGenreButton;
    private javax.swing.JButton addTrackButton;
    private javax.swing.JButton addTrackButton2;
    private javax.swing.JTextField albumIDField;
    private javax.swing.JTextField bytesField;
    private javax.swing.JTextField composerField;
    private javax.swing.JTextArea dataTextArea;
    private javax.swing.JButton deleteGenreButton;
    private javax.swing.JTextField deleteGenreIdField;
    private javax.swing.JTextField deleteGenreNameField;
    private javax.swing.JButton deleteTrackButton;
    private javax.swing.JTextField deleteTrackIDField;
    private javax.swing.JTextField deleteTrackNameField;
    private javax.swing.JTextField editAlbumIDField;
    private javax.swing.JTextField editBytesField;
    private javax.swing.JTextField editComposerField;
    private javax.swing.JButton editGenreButton;
    private javax.swing.JTextField editGenreIDField;
    private javax.swing.JTextField editGenreIdField;
    private javax.swing.JTextField editGenreNameField;
    private javax.swing.JTextField editMediaTypeIDField;
    private javax.swing.JTextField editMillisecondsField;
    private javax.swing.JTextField editTrackIDField;
    private javax.swing.JTextField editTrackNameField;
    private javax.swing.JTextField editUnitPriceField;
    private javax.swing.JTextField genreIDField;
    private javax.swing.JTextField genreIdField;
    private javax.swing.JTextField genreTextField;
    private javax.swing.JButton getRandomTrackButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mediaTypeIDField;
    private javax.swing.JTextField millisecondsField;
    private javax.swing.JButton printButton;
    private javax.swing.JTextArea randomTrackField;
    private javax.swing.JButton searchTrackByGenreButton;
    private javax.swing.JTextField searchTrackByGenreField;
    private javax.swing.JTextArea searchTrackByGenreTextArea;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JScrollPane trackByGenreTextArea;
    private javax.swing.JTextField trackIDField;
    private javax.swing.JTextField trackNameField;
    private javax.swing.JTextField unitPriceField;
    private javax.swing.JButton viewGenreButton;
    private javax.swing.JButton viewTracksButton;
    // End of variables declaration//GEN-END:variables
}
